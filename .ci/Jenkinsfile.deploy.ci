#!groovy

import groovy.json.JsonOutput
import java.util.Optional
import java.text.SimpleDateFormat
import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult

def speedUp = '--configure-on-demand --daemon --parallel'
def nebulaReleaseScope = (env.GIT_BRANCH == 'origin/feature/pipelines') ? '' : "-Prelease.scope=patch"
def nebulaRelease = "-x prepare -x release snapshot ${nebulaReleaseScope}"
def gradleDefaultSwitches = "${speedUp} ${nebulaRelease}"
def gradleAdditionalTestTargets = "integrationTest"
def gradleAdditionalSwitches = "shadowJar"
def slackNotificationChannel = "#ci"
def projectPrefix = "kai-web-ci"

def author = ""
def message = ""
def testSummary = ""
def total = 0
def failed = 0
def skipped = 0
def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")

def notifySlack(text, channel, attachments) {
    def slackURL = 'https://hooks.slack.com/services/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'

    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_emoji: ":jenkins:",
        attachments: attachments
    ])

    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}

def getGitAuthor = {
    def commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
    author = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
}

def getLastCommitMessage = {
    message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
}

def getGitCommit ={
    gitcommit = sh(returnStdout: true, script: 'git log -1 --pretty=format:"%H"').trim()
}

def getGitBranch ={
    // gitbranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    gitbranch = scm.branches[0].name
}

def isPublishingBranch = { ->
    return env.GIT_BRANCH == 'origin/master' || env.GIT_BRANCH =~ /release.+/
}

def isResultGoodForPublishing = { ->
    return currentBuild.result == null
}

@NonCPS
def getTestSummary = { ->

    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)

    def summary = ""

    if (testResultAction != null) {
        total = testResultAction.getTotalCount()
        failed = testResultAction.getFailCount()
        skipped = testResultAction.getSkipCount()

        summary = "Passed: " + (total - failed - skipped)
        summary = summary + (", Failed: " + failed)
        summary = summary + (", Skipped: " + skipped)
    } else {
        summary = "No tests found"
    }

    return summary

}

@NonCPS
def getFailedTests = { ->
    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    def failedTestsString = "```"

    if (testResultAction != null) {
        def failedTests = testResultAction.getFailedTests()

        if (failedTests.size() > 9) {
            failedTests = failedTests.subList(0, 8)
        }

        for(CaseResult cr : failedTests) {
            failedTestsString = failedTestsString + "${cr.getFullDisplayName()}:\n${cr.getErrorDetails()}\n\n"
        }
        failedTestsString = failedTestsString + "```"
    }
    return failedTestsString
}

@NonCPS
def getChangeLog = { ->
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.rawBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

def populateGlobalVariables = {
    getLastCommitMessage()
    getGitAuthor()
    getGitCommit()
    getGitBranch()
    testSummary = getTestSummary()
    changeLog = getChangeLog()
}

node {
  try {

   stage('SCM Pull') {
        checkout scm
   }

    stage ('Cleanup artifacts') {
        sh 'sudo rm -rf coverage/*'
    }

    stage ('Docker build') {
        sh "docker build -t kai-web-ci:$BUILD_NUMBER --build-arg environment=production ."
    }

    stage ('NPM Lint') {
        sh "docker run --rm kai-web-ci:$BUILD_NUMBER npm run lint"
    }

    stage ('NPM install') {
        sh "docker run --rm kai-web-ci:$BUILD_NUMBER npm install"
    }

    stage ('NPM Test') {
        sh "docker run --rm kai-web-ci:$BUILD_NUMBER npm run test"
    }

    stage ('NPM Coverage') {
        sh "docker run --rm -e JEST_JUNIT_OUTPUT_DIR='./coverage' -v $WORKSPACE/coverage:/app/coverage kai-web-ci:$BUILD_NUMBER npm run coverage --watchAll=false --reporters=jest-junit"
    }

    stage ('Cover reports') {

    step([$class: 'JUnitResultArchiver', testResults: 'coverage/*.xml'])

        populateGlobalVariables()

            def buildColor = currentBuild.result == null ? "good" : "warning"
            def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result
            def jobName = "${env.JOB_NAME}"
            def buildTime = sdf.format(date)

            if (failed > 0) {
                buildStatus = "Failed"

                if (isPublishingBranch()) {
                    buildStatus = "MasterFailed"
                }

                buildColor = "danger"
                def failedTestsString = getFailedTests()

                notifySlack("", slackNotificationChannel, [
                    [
                        title: "${jobName}, build #${env.BUILD_NUMBER}",
                        title_link: "${env.BUILD_URL}",
                        color: "${buildColor}",
                        text: "${buildStatus}\n${author}",
                        "mrkdwn_in": ["fields"],
                        fields: [
                            [
                                title: "Commit",
                                value: "https://github.com/kudohq/kudo-kai-web/commit/${gitcommit}",
                                short: true
                            ],
                            [
                                title: "Test Results",
                                value: "${testSummary}",
                                short: true
                            ],
                            [
                                title: "Last Commit",
                                value: "${message}",
                                short: false
                            ],
                            [
                                title: "Branch",
                                value: "<https://github.com/kudohq/kudo-kai-web/tree/${gitbranch}|${gitbranch}>",
                                short: false
                            ],
                            [
                                title: "Build time",
                                value: "${buildTime}",
                                short: false
                            ]
                        ]
                    ],
                    [
                        title: "Failed Tests",
                        color: "${buildColor}",
                        text: "${failedTestsString}",
                        "mrkdwn_in": ["text"],
                    ]
                ])
            } else {
                buildColor = "#00FF00"
                notifySlack("", slackNotificationChannel, [
                    [
                        title: "${jobName}, build #${env.BUILD_NUMBER}",
                        title_link: "${env.BUILD_URL}",
                        color: "${buildColor}",
                        author_name: "${author}",
                        text: "${buildStatus}\n${author}",
                        fields: [
                            [
                                title: "Commit",
                                value: "<https://github.com/kudohq/kudo-kai-web/commit/${gitcommit}|${gitcommit}>",
                                short: true
                            ],
                            [
                                title: "Test Results",
                                value: "${testSummary}",
                                short: true
                            ],
                            [
                                title: "Last Commit",
                                value: "${message}",
                                short: false
                            ],
                            [
                                title: "Branch",
                                value: "<https://github.com/kudohq/kudo-kai-web/tree/${gitbranch}|${gitbranch}>",
                                short: false
                            ],
                            [
                                title: "Build time",
                                value: "${buildTime}",
                                short: false
                            ]
                        ]
                    ],
                    [
                        title: "Changes",
                        color: "${buildColor}",
                        text: "${changeLog}",
                        "mrkdwn_in": ["text"]
                    ]
                ])
            }
        }

    stage ('Deployment') {

        script {
                    if (gitbranch =~ /^deploy/) {
                        build job: 'kai-Web-CD', parameters: [[$class: 'StringParameterValue', name: 'branch', value: "$gitbranch"]], wait: false
                    } else {
                        echo 'Skipping'
                    }
                }
    }

}

catch (err) {

    populateGlobalVariables()

        currentBuild.result = "danger"
        def buildStatus = "Fail"
        def buildColor = "#FF0000"
        def jobName = "${env.JOB_NAME}"
        def buildTime = sdf.format(date)

        notifySlack("", slackNotificationChannel, [
            [
                title: "${jobName}, build #${env.BUILD_NUMBER}",
                title_link: "${env.BUILD_URL}",
                color: "${buildColor}",
                author_name: "${author}",
                text: "${buildStatus}\n${author}",
                fields: [
                    [
                        title: "Commit",
                        value: "https://github.com/kudohq/kudo-kai-web/commit/${gitcommit}",
                        short: true
                    ],
                    [
                        title: "Last Commit",
                        value: "${message}",
                        short: false
                    ]
                ]
            ],
            [
                title: "Changes",
                color: "${buildColor}",
                text: "${changeLog}",
                "mrkdwn_in": ["text"]
            ]
        ])

  throw err
}
}
